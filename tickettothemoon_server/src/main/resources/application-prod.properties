#  SpringBoot config start ---------------
# - Ressources ----------
spring.resources.chain.strategy.content.enabled=true
spring.resources.cache.period=7d
# - Authentification ----------
# enable the desired authentication type
# by default the authentication is disabled
tickettothemoon.security.enable=false
# SpringBoot config END ----------------------------

# FLYWAY ----------------------
database=mysql
# spring.flyway.baselineOnMigrate = true 
# spring.flyway.locations= classpath:db/${database}
spring.flyway.locations= classpath:db/${database}/common,classpath:db/${database}/prod
# spring.datasource.schema=classpath*:db/${database}/common/V1__Init_schema_Mysql.sql
# spring.datasource.data=classpath*:db/${database}/prod/V2__Init_data_Mysql.sql
# spring.flyway.locations= ${schema},${data}
# FLYWAY config end -----------

# -- JPA ---
# Here, spring.jpa.hibernate.ddl-auto can be none, update, create, or create-drop. See the Hibernate documentation for details.
# 	- none: The default for MySQL. No change is made to the database structure.
# 	- update: Hibernate changes the database according to the given entity structures.
# 	- create: Creates the database every time but does not drop it on close.
# 	- create-drop: Creates the database and drops it when SessionFactory closes.
# You must begin with either create or update, because you do not yet have the database structure. After the first run, you can switch it to update or none, according to program requirements. Use update when you want to make some change to the database structure.
# The default for H2 and other embedded databases is create-drop. For other databases, such as MySQL, the default is none.
# SECURITY : 	It is a good security practice to, after your database is in a production state, set this to none, revoke all privileges from the MySQL user connected to the Spring application, and give the MySQL user only SELECT, UPDATE, INSERT, and DELETE. You can read more about this at the end of this guide (https://spring.io/guides/gs/accessing-data-mysql/).
# TO_UPDATE:
# none est le bon paramètre ici.
# none          : schema ne bouge pas et data évolue selon les entrées. Les redémarrage n'impacte rien
# create-drop   : the scripts are executed before the classes. thus the data.sql is reseted. 
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=MYSQL
spring.jpa.database-platform=org.hibernate.dialect.MySQL57Dialect
# JPA config end ------------------------


#----------------------------------------------------------------
# Prod config end 